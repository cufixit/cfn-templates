AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  StackName:
    Type: "String"
  LambdaCodeSourceBucket:
    Type: "String"
  PhotosBucketName:
    Type: "String"
  DomainEndpoint:
    Type: "String"
  ReportsTableName:
    Type: "String"
  ReportsTableStreamArn:
    Type: "String"
  ProcessReportQueueArn:
    Type: "String"
  ProcessReportQueueUrl:
    Type: "String"
  ProcessGroupQueueArn:
    Type: "String"
  ProcessGroupQueueUrl:
    Type: "String"
  DetectKeywordsQueueArn:
    Type: "String"
  DetectKeywordsQueueUrl:
    Type: "String"
  CognitoUserPoolId:
    Type: "String"
  CognitoAdminPoolId:
    Type: "String"

  PostReportLambdaName:
    Type: "String"
    Default: "post-report"
  StoreReportLambdaName:
    Type: "String"
    Default: "store-report"
  PostGroupLambdaName:
    Type: "String"
    Default: "post-group"
  StoreGroupLambdaName:
    Type: "String"
    Default: "store-group"
  UpdateIndexLambdaName:
    Type: "String"
    Default: "update-index"
  DetectKeywordsLambdaName:
    Type: "String"
    Default: "detect-keywords"
  DetectPhotoLabelsLambdaName:
    Type: "String"
    Default: "detect-photo-labels"
  FetchReportLambdaName:
    Type: "String"
    Default: "fetch-report"
  QueryReportsLambdaName:
    Type: "String"
    Default: "query-reports"
  SuggestReportsLambdaName:
    Type: "String"
    Default: "suggest-reports"
  DeleteReportLambdaName:
    Type: "String"
    Default: "delete-report"

Resources:
  # Lambda Layers

  HelperLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      LayerName: "helper"
      Content:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: "layers/helper.zip"
      CompatibleRuntimes:
        - "python3.9"

  OpenSearchLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      LayerName: "opensearch"
      Content:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: "layers/opensearch.zip"
      CompatibleRuntimes:
        - "python3.9"

  # Lambda Functions

  PostReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "PostReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${PostReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "PostReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          PHOTOS_BUCKET_NAME: !Ref "PhotosBucketName"
          PROCESS_REPORT_QUEUE_URL: !Ref "ProcessReportQueueUrl"

  StoreReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "StoreReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${StoreReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "StoreReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"
          DETECT_KEYWORDS_QUEUE_URL: !Ref "DetectKeywordsQueueUrl"

  PostGroupLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "PostGroupLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${PostGroupLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "PostReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          PROCESS_GROUP_QUEUE_URL: !Ref "ProcessGroupQueueUrl"

  StoreGroupLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "StoreGroupLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${StoreGroupLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "StoreReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"

  UpdateIndexLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "UpdateIndexLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${UpdateIndexLambdaName}.zip"
      PackageType: "Zip"
      Layers:
        - !Ref "OpenSearchLayer"
      Role: !GetAtt "UpdateIndexLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DOMAIN_ENDPOINT: !Ref "DomainEndpoint"
          DOMAIN_PORT: 443

  DetectKeywordsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "DetectKeywordsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${DetectKeywordsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "DetectKeywordsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"

  DetectPhotoLabelsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "DetectPhotoLabelsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${DetectPhotoLabelsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "DetectPhotoLabelsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"

  FetchReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "FetchReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${FetchReportLambdaName}.zip"
      PackageType: "Zip"
      Layers:
        - !Ref "HelperLayer"
      Role: !GetAtt "FetchReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          PHOTOS_BUCKET_NAME: !Ref "PhotosBucketName"
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"
          USER_POOL_ID: !Ref "CognitoUserPoolId"
          ADMIN_POOL_ID: !Ref "CognitoAdminPoolId"

  QueryReportsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "QueryReportsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${QueryReportsLambdaName}.zip"
      PackageType: "Zip"
      Layers:
        - !Ref "HelperLayer"
        - !Ref "OpenSearchLayer"
      Role: !GetAtt "QueryReportsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DOMAIN_ENDPOINT: !Ref "DomainEndpoint"
          DOMAIN_PORT: 443
          USER_POOL_ID: !Ref "CognitoUserPoolId"
          ADMIN_POOL_ID: !Ref "CognitoAdminPoolId"

  DeleteReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "DeleteReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${DeleteReportLambdaName}.zip"
      PackageType: "Zip"
      Layers:
        - !Ref "HelperLayer"
      Role: !GetAtt "DeleteReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"
          PHOTOS_BUCKET_NAME: !Ref "PhotosBucketName"
          USER_POOL_ID: !Ref "CognitoUserPoolId"
          ADMIN_POOL_ID: !Ref "CognitoAdminPoolId"

  SuggestReportsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "SuggestReportsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "functions/${SuggestReportsLambdaName}.zip"
      PackageType: "Zip"
      Layers:
        - !Ref "HelperLayer"
        - !Ref "OpenSearchLayer"
      Role: !GetAtt "SuggestReportsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          REPORTS_TABLE_NAME: !Ref "ReportsTableName"
          DOMAIN_ENDPOINT: !Ref "DomainEndpoint"
          DOMAIN_PORT: 443

  # Lambda Event Source Mappings

  StoreReportLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "ProcessReportQueueArn"
      FunctionName: !GetAtt "StoreReportLambda.Arn"

  StoreGroupLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "ProcessGroupQueueArn"
      FunctionName: !GetAtt "StoreGroupLambda.Arn"

  UpdateIndexLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "ReportsTableStreamArn"
      FunctionName: !GetAtt "UpdateIndexLambda.Arn"
      StartingPosition: "LATEST"

  DetectKeywordsLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "DetectKeywordsQueueArn"
      FunctionName: !GetAtt "DetectKeywordsLambda.Arn"

  # Lambda Permissions

  DetectPhotoLabelsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt "DetectPhotoLabelsLambda.Arn"
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${PhotosBucketName}"

  # Lambda Execution Roles

  PostReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${PostReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  StoreReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${StoreReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  PostGroupLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${PostGroupLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  StoreGroupLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${StoreGroupLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  UpdateIndexLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${UpdateIndexLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

  DetectKeywordsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${DetectKeywordsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/ComprehendFullAccess"

  DetectPhotoLabelsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${DetectPhotoLabelsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess"

  FetchReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${FetchReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  QueryReportsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${QueryReportsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

  DeleteReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${DeleteReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  SuggestReportsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${SuggestReportsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

  # Lambda Log Groups

  PostReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostReportLambdaName}"

  StoreReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StoreReportLambdaName}"

  PostGroupLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostGroupLambdaName}"

  StoreGroupLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StoreGroupLambdaName}"

  UpdateIndexLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UpdateIndexLambdaName}"

  DetectKeywordsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DetectKeywordsLambdaName}"

  DetectPhotoLabelsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DetectPhotoLabelsLambdaName}"

  FetchReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FetchReportLambdaName}"

  QueryReportsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${QueryReportsLambdaName}"

  DeleteReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteReportLambdaName}"

  SuggestReportsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SuggestReportsLambdaName}"

Outputs:
  PostReportLambdaArn:
    Value: !GetAtt "PostReportLambda.Arn"
  StoreReportLambdaArn:
    Value: !GetAtt "StoreReportLambda.Arn"
  PostGroupLambdaArn:
    Value: !GetAtt "PostGroupLambda.Arn"
  StoreGroupLambdaArn:
    Value: !GetAtt "StoreGroupLambda.Arn"
  UpdateIndexLambdaArn:
    Value: !GetAtt "UpdateIndexLambda.Arn"
  DetectKeywordsLambdaArn:
    Value: !GetAtt "DetectKeywordsLambda.Arn"
  DetectPhotoLabelsLambdaArn:
    Value: !GetAtt "DetectPhotoLabelsLambda.Arn"
  FetchReportLambdaArn:
    Value: !GetAtt "FetchReportLambda.Arn"
  QueryReportsLambdaArn:
    Value: !GetAtt "QueryReportsLambda.Arn"
  DeleteReportLambdaArn:
    Value: !GetAtt "DeleteReportLambda.Arn"
  SuggestReportsLambdaArn:
    Value: !GetAtt "SuggestReportsLambda.Arn"
  UpdateIndexRoleArn:
    Value: !GetAtt "UpdateIndexLambdaRole.Arn"
  QueryReportsRoleArn:
    Value: !GetAtt "QueryReportsLambdaRole.Arn"
  SuggestReportsRoleArn:
    Value: !GetAtt "SuggestReportsLambdaRole.Arn"
