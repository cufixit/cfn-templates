AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CognitoAdminPoolArn:
    Type: "String"
  PostGroupLambdaArn:
    Type: "String"
  FetchReportLambdaArn:
    Type: "String"
  QueryReportsLambdaArn:
    Type: "String"
  DeleteReportLambdaArn:
    Type: "String"
  FetchGroupLambdaArn:
    Type: "String"
  QueryGroupsLambdaArn:
    Type: "String"
  SuggestReportsLambdaArn:
    Type: "String"
  StageName:
    Type: "String"
    Default: "dev"

Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName}-admin-api"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiReportsGetMethod"
      - "ApiReportsOptionsMethod"
      - "ApiReportIdGetMethod"
      - "ApiReportIdDeleteMethod"
      - "ApiReportIdOptionsMethod"
      - "ApiGroupsGetMethod"
      - "ApiGroupsPostMethod"
      - "ApiGroupsOptionsMethod"
      - "ApiGroupIdGetMethod"
      - "ApiGroupIdSuggestGetMethod"
      - "ApiGroupIdReportsPostMethod"
    Properties:
      RestApiId: !Ref "Api"
      StageName: !Ref "StageName"

  CognitoAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: !Sub "${AWS::StackName}-cognito-authorizer"
      RestApiId: !Ref "Api"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      ProviderARNs:
        - !Ref "CognitoAdminPoolArn"

  # API Reports Resources

  ApiReportsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt "Api.RootResourceId"
      PathPart: "reports"
      RestApiId: !Ref "Api"

  ApiReportsGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportsResource"
      RequestParameters:
        "method.request.querystring.from": false
        "method.request.querystring.size": false
        "method.request.querystring.q": false
        "method.request.querystring.userId": false
        "method.request.querystring.building": false
        "method.request.querystring.status": false
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryReportsLambdaArn}/invocations"

  ApiReportsOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportsResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  ApiReportIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref "ApiReportsResource"
      PathPart: "{reportId}"
      RestApiId: !Ref "Api"

  ApiReportIdGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportIdResource"
      RequestParameters:
        "method.request.path.reportId": true
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchReportLambdaArn}/invocations"

  ApiReportIdDeleteMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "DELETE"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportIdResource"
      RequestParameters:
        "method.request.path.reportId": true
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteReportLambdaArn}/invocations"

  ApiReportIdOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportIdResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # API Groups Resource

  ApiGroupsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt "Api.RootResourceId"
      PathPart: "groups"
      RestApiId: !Ref "Api"

  ApiGroupsGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupsResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryGroupsLambdaArn}/invocations"

  ApiGroupsPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "POST"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupsResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostGroupLambdaArn}/invocations"

  ApiGroupsOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupsResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  ApiGroupIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref "ApiGroupsResource"
      PathPart: "{groupId}"
      RestApiId: !Ref "Api"

  ApiGroupIdGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupIdResource"
      RequestParameters:
        "method.request.path.groupId": true
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchGroupLambdaArn}/invocations"

  ApiGroupIdSuggestResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref "ApiGroupIdResource"
      PathPart: "suggest"
      RestApiId: !Ref "Api"

  ApiGroupIdSuggestGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupIdSuggestResource"
      RequestParameters:
        "method.request.path.groupId": true
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SuggestReportsLambdaArn}/invocations"

  ApiGroupIdReportsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref "ApiGroupIdResource"
      PathPart: "reports"
      RestApiId: !Ref "Api"

  ApiGroupIdReportsPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "POST"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiGroupIdReportsResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostGroupLambdaArn}/invocations"

  # Lambda Invocation Permissions

  PostGroupLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "PostGroupLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/POST/groups*"

  FetchReportLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "FetchReportLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/reports/*"

  QueryReportsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "QueryReportsLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/reports"

  DeleteReportLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "DeleteReportLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/DELETE/reports*"

  FetchGroupLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "FetchGroupLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/groups/*"

  QueryGroupLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "QueryGroupsLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/groups"

  SuggestReportsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "SuggestReportsLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/groups/*/suggest"

Outputs:
  ApiId:
    Value: !Ref "Api"
  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
