AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  StackName:
    Type: "String"
  LambdaCodeSourceBucket:
    Type: "String"
  ReportsDomainEndpoint:
    Type: "String"
  ReportsTableName:
    Type: "String"
  ReportsTableStreamArn:
    Type: "String"
  PhotosBucketName:
    Type: "String"
  ProcessReportQueueArn:
    Type: "String"
  ProcessReportQueueUrl:
    Type: "String"
  DetectKeywordsQueueArn:
    Type: "String"
  DetectKeywordsQueueUrl:
    Type: "String"
  DetectPhotoLabelsQueueArn:
    Type: "String"
  DetectPhotoLabelsQueueUrl:
    Type: "String"

  PostReportLambdaName:
    Type: "String"
    Default: "post-report"
  StoreReportLambdaName:
    Type: "String"
    Default: "store-report"
  IndexReportLambdaName:
    Type: "String"
    Default: "index-report"
  DetectKeywordsLambdaName:
    Type: "String"
    Default: "detect-keywords"
  DetectPhotoLabelsLambdaName:
    Type: "String"
    Default: "detect-photo-labels"
  SearchReportUserLambdaName:
    Type: "String"
    Default: "search-report-user"
  SearchReportAdminLambdaName:
    Type: "String"
    Default: "search-report-admin"

Resources:
  # Lambda Functions

  PostReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "PostReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${PostReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "PostReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          photosBucketName: !Ref "PhotosBucketName"
          processReportQueueUrl: !Ref "ProcessReportQueueUrl"

  StoreReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "StoreReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${StoreReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "StoreReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsTableName: !Ref "ReportsTableName"
          detectKeywordsQueueUrl: !Ref "DetectKeywordsQueueUrl"

  IndexReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "IndexReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${IndexReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "IndexReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsDomainHost: !Ref "ReportsDomainEndpoint"
          reportsDomainPort: 443

  DetectKeywordsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "DetectKeywordsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${DetectKeywordsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "DetectKeywordsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsTableName: !Ref "ReportsTableName"

  DetectPhotoLabelsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "DetectPhotoLabelsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${DetectPhotoLabelsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "DetectPhotoLabelsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsTableName: !Ref "ReportsTableName"

  SearchReportUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "SearchReportUserLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${SearchReportUserLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "SearchReportUserLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsDomainEndpoint: !Ref "ReportsDomainEndpoint"
          reportsTableName: !Ref "ReportsTableName"

  SearchReportAdminLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "SearchReportAdminLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${SearchReportAdminLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "SearchReportAdminLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          photosBucketName: !Ref "PhotosBucketName"
          reportsDomainEndpoint: !Ref "ReportsDomainEndpoint"
          reportsTableName: !Ref "ReportsTableName"

  # Lambda Event Source Mappings

  StoreReportLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "ProcessReportQueueArn"
      FunctionName: !GetAtt "StoreReportLambda.Arn"

  IndexReportLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "ReportsTableStreamArn"
      FunctionName: !GetAtt "IndexReportLambda.Arn"
      StartingPosition: "LATEST"

  DetectKeywordsLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "DetectKeywordsQueueArn"
      FunctionName: !GetAtt "DetectKeywordsLambda.Arn"

  # Lambda Permissions

  DetectPhotoLabelsLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt "DetectPhotoLabelsLambda.Arn"
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${PhotosBucketName}"

  # Lambda Execution Roles

  PostReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${PostReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  StoreReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${StoreReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  IndexReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${IndexReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

  DetectKeywordsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${DetectKeywordsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/ComprehendFullAccess"

  DetectPhotoLabelsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${DetectPhotoLabelsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess"

  SearchReportUserLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${SearchReportUserLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  SearchReportAdminLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${SearchReportAdminLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  # Lambda Log Groups

  PostReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostReportLambdaName}"

  StoreReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StoreReportLambdaName}"

  IndexReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IndexReportLambdaName}"

  DetectKeywordsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DetectKeywordsLambdaName}"

  DetectPhotoLabelsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DetectPhotoLabelsLambdaName}"

  SearchReportUserLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchReportUserLambdaName}"

  SearchReportAdminLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchReportAdminLambdaName}"

Outputs:
  PostReportLambdaArn:
    Value: !GetAtt "PostReportLambda.Arn"
    Export:
      Name: "PostReportLambdaArn"
  StoreReportLambdaArn:
    Value: !GetAtt "StoreReportLambda.Arn"
    Export:
      Name: "StoreReportLambdaArn"
  IndexReportLambdaArn:
    Value: !GetAtt "IndexReportLambda.Arn"
    Export:
      Name: "IndexReportLambdaArn"
  DetectKeywordsLambdaArn:
    Value: !GetAtt "DetectKeywordsLambda.Arn"
    Export:
      Name: "DetectKeywordsLambdaArn"
  DetectPhotoLabelsLambdaArn:
    Value: !GetAtt "DetectPhotoLabelsLambda.Arn"
    Export:
      Name: "DetectPhotoLabelsLambdaArn"
  SearchReportUserLambdaArn:
    Value: !GetAtt "SearchReportUserLambda.Arn"
    Export:
      Name: "SearchReportUserLambdaArn"
  SearchReportAdminLambdaArn:
    Value: !GetAtt "SearchReportAdminLambda.Arn"
    Export:
      Name: "SearchReportAdminLambdaArn"
