AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  StackName:
    Type: "String"
  LambdaCodeSourceBucket:
    Type: "String"
  ReportsDomainEndpoint:
    Type: "String"
  ReportsTableName:
    Type: "String"
  PhotosBucketName:
    Type: "String"
  NewReportQueueArn:
    Type: "String"
  NewReportQueueUrl:
    Type: "String"
  KeywordExtractionQueueArn:
    Type: "String"
  KeywordExtractionQueueUrl:
    Type: "String"

  HandleNewReportLambdaName:
    Type: "String"
    Default: "handle-new-report"
  StoreAndIndexReportLambdaName:
    Type: "String"
    Default: "store-and-index-report"
  ExtractKeywordsLambdaName:
    Type: "String"
    Default: "extract-keywords"
  ExtractPhotoLabelsLambdaName:
    Type: "String"
    Default: "extract-photo-labels"
  SearchReportUserLambdaName:
    Type: "String"
    Default: "search-report-user"
  SearchReportAdminLambdaName:
    Type: "String"
    Default: "search-report-admin"

Resources:
  # Lambda Functions

  HandleNewReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "HandleNewReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${HandleNewReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "HandleNewReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          photosBucketName: !Ref "PhotosBucketName"
          newReportQueueUrl: !Ref "NewReportQueueUrl"

  StoreAndIndexReportLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "StoreAndIndexReportLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${StoreAndIndexReportLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "StoreAndIndexReportLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsDomainEndpoint: !Ref "ReportsDomainEndpoint"
          reportsTableName: !Ref "ReportsTableName"
          keywordExtractionQueueUrl: !Ref "KeywordExtractionQueueUrl"

  ExtractKeywordsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "ExtractKeywordsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${ExtractKeywordsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "ExtractKeywordsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsTableName: !Ref "ReportsTableName"

  ExtractPhotoLabelsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "ExtractPhotoLabelsLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${ExtractPhotoLabelsLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "ExtractPhotoLabelsLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsTableName: !Ref "ReportsTableName"

  SearchReportUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "SearchReportUserLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${SearchReportUserLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "SearchReportUserLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          reportsDomainEndpoint: !Ref "ReportsDomainEndpoint"
          reportsTableName: !Ref "ReportsTableName"

  SearchReportAdminLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref "SearchReportAdminLambdaName"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.9"
      Code:
        S3Bucket: !Ref "LambdaCodeSourceBucket"
        S3Key: !Sub "${SearchReportAdminLambdaName}.zip"
      PackageType: "Zip"
      Role: !GetAtt "SearchReportAdminLambdaRole.Arn"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          photosBucketName: !Ref "PhotosBucketName"
          reportsDomainEndpoint: !Ref "ReportsDomainEndpoint"
          reportsTableName: !Ref "ReportsTableName"

  # Lambda Event Source Mappings

  StoreAndIndexReportLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "NewReportQueueArn"
      FunctionName: !GetAtt "StoreAndIndexReportLambda.Arn"

  ExtractKeywordsLambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Ref "KeywordExtractionQueueArn"
      FunctionName: !GetAtt "ExtractKeywordsLambda.Arn"

  # Lambda Execution Roles

  HandleNewReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${HandleNewReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"

  StoreAndIndexReportLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${StoreAndIndexReportLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  ExtractKeywordsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${ExtractKeywordsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/ComprehendFullAccess"

  ExtractPhotoLabelsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${ExtractPhotoLabelsLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess"

  SearchReportUserLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${SearchReportUserLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  SearchReportAdminLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${StackName}-${SearchReportAdminLambdaName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  # Lambda Log Groups

  HandleNewReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HandleNewReportLambdaName}"

  StoreAndIndexReportLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StoreAndIndexReportLambdaName}"

  ExtractKeywordsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ExtractKeywordsLambdaName}"

  ExtractPhotoLabelsLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ExtractPhotoLabelsLambdaName}"

  SearchReportUserLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchReportUserLambdaName}"

  SearchReportAdminLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchReportAdminLambdaName}"

Outputs:
  HandleNewReportLambdaArn:
    Value: !GetAtt "HandleNewReportLambda.Arn"
    Export:
      Name: "HandleNewReportLambdaArn"
  StoreAndIndexReportLambdaArn:
    Value: !GetAtt "StoreAndIndexReportLambda.Arn"
    Export:
      Name: "StoreAndIndexReportLambdaArn"
  ExtractKeywordsLambdaArn:
    Value: !GetAtt "ExtractKeywordsLambda.Arn"
    Export:
      Name: "ExtractKeywordsLambdaArn"
  ExtractPhotoLabelsLambdaArn:
    Value: !GetAtt "ExtractPhotoLabelsLambda.Arn"
    Export:
      Name: "ExtractPhotoLabelsLambdaArn"
  SearchReportUserLambdaArn:
    Value: !GetAtt "SearchReportUserLambda.Arn"
    Export:
      Name: "SearchReportUserLambdaArn"
  SearchReportAdminLambdaArn:
    Value: !GetAtt "SearchReportAdminLambda.Arn"
    Export:
      Name: "SearchReportAdminLambdaArn"
