AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ApiName:
    Type: "String"
    Default: "cu-fixit-api"
  CognitoUserPoolArn:
    Type: "String"
  HandleNewReportLambdaArn:
    Type: "String"
    Default: "arn:aws:lambda:us-east-1:662545362847:function:handle-new-report"

Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref "ApiName"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

  # API Deployment

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiReportPostMethod"
      - "ApiReportOptionsMethod"
    Properties:
      RestApiId: !Ref "Api"
      StageName: "dev"

  ApiCognitoAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: !Sub "${ApiName}-cognito-authorizer"
      RestApiId: !Ref "Api"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      ProviderARNs:
        - !Ref "CognitoUserPoolArn"

  # API Report Resource

  ApiReportResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt "Api.RootResourceId"
      PathPart: "report"
      RestApiId: !Ref "Api"

  ApiReportPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "ApiCognitoAuthorizer"
      HttpMethod: "POST"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleNewReportLambdaArn}/invocations"

  ApiReportOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "ApiCognitoAuthorizer"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  HandleNewReportLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "HandleNewReportLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/POST/report"

Outputs:
  ApiId:
    Description: "API ID"
    Value: !Ref "Api"
