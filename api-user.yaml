AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CognitoUserPoolArn:
    Type: "String"
  PostReportLambdaArn:
    Type: "String"
  SearchReportUserLambdaArn:
    Type: "String"

Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "${AWS::StackName}-user-api"
      EndpointConfiguration:
        Types:
          - "REGIONAL"

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiReportsGetMethod"
      - "ApiReportsPostMethod"
      - "ApiReportsOptionsMethod"
      - "ApiReportIdGetMethod"
      - "ApiReportIdOptionsMethod"
    Properties:
      RestApiId: !Ref "Api"
      StageName: "dev"

  CognitoAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Name: !Sub "${AWS::StackName}-cognito-authorizer"
      RestApiId: !Ref "Api"
      Type: "COGNITO_USER_POOLS"
      IdentitySource: "method.request.header.Authorization"
      ProviderARNs:
        - !Ref "CognitoUserPoolArn"

  # API Reports Resources

  ApiReportsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt "Api.RootResourceId"
      PathPart: "reports"
      RestApiId: !Ref "Api"

  ApiReportsGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportsResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReportUserLambdaArn}/invocations"

  ApiReportsPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "POST"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportsResource"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostReportLambdaArn}/invocations"

  ApiReportsOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportsResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  ApiReportIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref "ApiReportsResource"
      PathPart: "{reportId}"
      RestApiId: !Ref "Api"

  ApiReportIdGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "CognitoAuthorizer"
      HttpMethod: "GET"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportIdResource"
      RequestParameters:
        "method.request.path.reportId": true
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchReportUserLambdaArn}/invocations"

  ApiReportIdOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "OPTIONS"
      RestApiId: !Ref "Api"
      ResourceId: !Ref "ApiReportIdResource"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # Lambda Invocation Permissions

  SearchReportUserLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "SearchReportUserLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/GET/reports*"

  PostReportLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "PostReportLambdaArn"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api.RestApiId}/*/POST/reports"

Outputs:
  ApiId:
    Description: "API ID"
    Value: !Ref "Api"
